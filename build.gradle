plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
    id 'net.neoforged.gradle.mixin' version '7.0.165'
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'net.neoforged.gradle.userdev'
apply plugin: 'net.neoforged.gradle.mixin'

version = mod_version
group = mod_group_id

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

repositories {
    mavenLocal()
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }

    flatDir {
        dir "deps"
    }
}

base {
    archivesName = mod_id
}

jarJar.enable()

minecraft.accessTransformers.entry 'public net.minecraft.server.MinecraftServer storageSource'
minecraft.accessTransformers.entry 'public net.minecraft.world.level.biome.BiomeManager biomeZoomSeed'
minecraft.accessTransformers.entry 'public-f net.minecraft.util.profiling.ActiveProfiler WARNING_TIME_NANOS'
minecraft.accessTransformers.entry 'public net.minecraft.server.level.ChunkMap$TrackedEntity'
minecraft.accessTransformers.entry 'public net.minecraft.world.level.GameRules register(Ljava/lang/String;Lnet/minecraft/world/level/GameRules$Category;Lnet/minecraft/world/level/GameRules$Type;)Lnet/minecraft/world/level/GameRules$Key;'
minecraft.accessTransformers.entry 'public net.minecraft.world.level.GameRules$BooleanValue create(Z)Lnet/minecraft/world/level/GameRules$Type;'
minecraft.accessTransformers.entry 'public com.mojang.blaze3d.shaders.Program$Type getGlType()I'
minecraft.accessTransformers.entry 'public-f net.minecraft.world.entity.Entity getBoundingBox()Lnet/minecraft/world/phys/AABB;'

minecraft.accessTransformers.entry 'public net.minecraft.client.renderer.chunk.SectionRenderDispatcher$RenderSection$CompileTask'
minecraft.accessTransformers.entry 'public-f net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator'
minecraft.accessTransformers.entry 'public net.minecraft.resources.RegistryDataLoader$Loader'
minecraft.accessTransformers.entry 'public net.minecraft.client.gui.screens.worldselection.CreateWorldScreen$MoreTab'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache emptyChunk'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache lightEngine'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache storage'
minecraft.accessTransformers.entry 'public net.minecraft.client.multiplayer.ClientChunkCache level'

minecraft.accessTransformers.entry 'public net.minecraft.world.entity.EntityType$Builder dimensions'

minecraft.accessTransformers.entry 'public net.minecraft.util.datafix.fixes.ItemStackComponentizationFix$ItemStackData'

/*sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
        }
    }
}*/

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        getArguments().addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    configs.add("imm_ptl_peripheral.mixins.json")
    configs.add("q_misc_util.mixins.json")
    configs.add("imm_ptl.mixins.json")
    configs.add("imm_ptl_compat.mixins.json")
    configs.add("imm_ptl_fabric.mixins.json")
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    /*implementation "maven.modrinth:embeddium:Na1PoLYF"
    compileOnly "maven.modrinth:oculus:1.20.1-1.6.15a"*/

    implementation "maven.modrinth:sodium:mc1.21-0.6.0-beta.2-neoforge"
    compileOnly "maven.modrinth:iris:1.8.0-beta.5+1.21-neoforge"

    implementation "maven.modrinth:cloth-config:15.0.140+neoforge"
    implementation "maven.modrinth:pehkui:3.8.3+1.21-neoforge"
}

tasks.named('build').configure { dependsOn('jarJar') }

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range, issue_tracker_url: issue_tracker_url,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}